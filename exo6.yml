openapi: 3.1.0
info:
  title: User Profile Management
  version: 1.0.0
  description: User Profile Management
servers:
  - url: 'https://localhost:8000'
paths:
  /users/{id}:
    get:
      summary: Get a full user profile by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                userExample:
                  value:
                    - first_name: "Coco"
                      last_name: "Yourboo"
                      birthdate: "2007-04-07"
                      email: "cocobrowniees@gmail.com"
                      address_street: "Anjanahary"
                      address_city: "Antananarivo"
                      address_country: "Madagascar"
                      address_postal_code: 101
                      needs_newsletter: false
                      language: "mg"
  /users:
    post:
      summary: Create a list of users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUserProfile'
            examples:
              createExample:
                value:
                  - first_name: "Coco"
                    last_name: "Yourboo"
                    birthdate: "2007-04-07"
                    email: "cocobrowniees@gmail.com"
                    address_street: "Anjanahary"
                    address_city: "Antananarivo"
                    address_country: "Madagascar"
                    address_postal_code: 101
                    needs_newsletter: false
                    language: "mg"
      responses:
        '201':
          description: List of users created with IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'

  /users/{id}/personalInfo:
    put:
      summary: Update personal information only
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInfo'
      responses:
        '200':
          description: Personal information updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/address:
    put:
      summary: Update address only
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/preferences:
    put:
      summary: Update preferences only
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preferences'
      responses:
        '200':
          description: Preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

components:
  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier of the user

  schemas:
    UserProfile:
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonalInfo'
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/Preferences'
        - type: object
          properties:
            identifier:
              type: string
          required:
            - identifier

    CreateUserProfile:
      allOf:
        - $ref: '#/components/schemas/PersonalInfo'
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/Preferences'

    PersonalInfo:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        birthdate:
          type: string
          format: date
        email:
          type: string
          format: email
      required:
        - first_name
        - last_name
        - birthdate
        - email

    Address:
      type: object
      properties:
        address_street:
          type: string
        address_city:
          type: string
        address_country:
          type: string
        address_postal_code:
          type: integer
      required:
        - address_street
        - address_city
        - address_country
        - address_postal_code

    Preferences:
      type: object
      properties:
        needs_newsletter:
          type: boolean
        language:
          type: string
          enum: [mg, fr, eng]
      required:
        - needs_newsletter
        - language

